@inherits Fluxor.Blazor.Web.Components.FluxorComponent;

<div class="dash-board">
    @if (!State.Value.HomeCountryFound)
    {
        <div>
            <p>Home country not found</p>
            <HomeCountryDropDown @ref="dropDown" CountryChanged="HomeCountryChange" CountryNames="@countryNames" CountryCodeDict="@countryCodeDict" />
        </div>
    }
    else if (!State.Value.HomeCountryFound || !State.Value.CountryOfTheDayFound)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="country-of-the-day">
            <h2>
                The country of the day is @State.Value.CountryOfTheDay.Name
            </h2>
        </div>
        <div class="container"> 

            <div class="header"> 
                <div class="data-filter">
                    @if (State.Value.ShownMetrics.Count > 0)
                    {
                        <DataFilterer @key="@State.Value.SharedMetrics" Data="@State.Value.ShownMetrics" OnChange="HandleFilterChange"></DataFilterer>
                    }
                </div>

                <div class="sorting-menu">
                    <SortingComponent SortingOptions="@sortingOptions" OnSortingOptionSelected="@SortData" />
                </div>
                    
                <nav class="table-of-contents">
                    <ul>
                        @foreach (var metric in State.Value.SharedMetrics)
                        {
                            <li><a href="#@FormatLabel(metric)">@metric</a></li>
                        }
            </ul>
        </nav>
        </div>
        @if (State.Value.SharedMetrics.Count == 0)
        {
            <div>
                <p>No shared data between @State.Value.HomeCountry.Name and @State.Value.CountryOfTheDay.Name</p>
            </div>
        }
        else if(State.Value.ShownMetrics.Count != 0)
        {
            <div class="grid-container">
                @foreach (var metric in State.Value.ShownMetrics)
                {
                    <div id="@FormatLabel(metric)" class="grid-item">
                            <ComparisonComponent @key=@metric @ref="@compComp[metric]" CountryComparison="@State.Value.CountryOfTheDay" CountryOrigin="@State.Value.HomeCountry" date="@_date" ResourceType="@metric"></ComparisonComponent>
                    </div>
                }
                </div>
            }
            else
            {
                <div>
                    <p>No data selected between @State.Value.HomeCountry.Name and @State.Value.CountryOfTheDay.Name</p>
                </div>
            }

        </div>
    }
</div>

@code {
    // Sorting options
    private List<SortingOptions> sortingOptions = new List<SortingOptions>
        {
            new SortingOptions {DisplayName = "Alphabetical", Value = "alphabetical"},
            new SortingOptions {DisplayName = "Descending ", Value = "biggest_difference"},
            new SortingOptions {DisplayName = "Ascending", Value = "smallest_difference"}
        };

        // Sorting methods
        private void SortData(String selectedValue)
        {
            switch(selectedValue)
            {
                case "alphabetical":
                    //Alphabetical sorting logic
                    _dataMetrics = _dataMetrics.OrderBy(metric => metric).ToList();
                    break;
                case "biggest_difference":
                    // Biggest differnce sorting logic
                    break;
                case "smallest_difference":
                    // Smallest difference sorting logic
                    break;

            }
        }
}
